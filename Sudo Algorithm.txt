_________________________________________________________________
			GLOBAL VARIABLES
_________________________________________________________________

(DYNAMIC ARRAY) float voltageValues[]  		# type: link list

(DYNAMIC ARRAY) char alphanumericValues[]  	# type: link list

(Dictionary) morseCodeREF{}    # Stores the character and morse code in 1's and 0's

int lenDot


_________________________________________________________________
			MAIN FUNCTION
_________________________________________________________________

function int main()
	inifite loop  ---  while(true)      #keeps application running 
					     until physically stopped

	Button listener (with debouncing)   ---  call buttonEventHandler()

	CREATE New Thread 

		Invoke the ADC   ---  enableADC ()  # Thread ensures LDR data is contineously
						    # being recoded while main program runs
	
	IF enableADC == 1
		TERMINATE Thread  # terminate thread after program is complete
	END

	Print Message --- Output()       # Display final message

.................................................................


_________________________________________________________________
			SUPPORTING FUNCTION
_________________________________________________________________

function void buttonEventHandler( ) 
	# NOTE: the LDR is connected to to VCC and is always on

	Print to console ---  Ask user to pass the message under the LDR	
		         ---  Then Display that system is running


	Invoke LED       ---  enableLED ( gpioPinNumber )   # for the paper input 
				#	this will emit light onto the paper and for
				#	the LED input this will begin the LED input
				#	sequence
.................................................................
function int enableADC( ) 
	# Start ADC and send values to the PI
	
	Fill voltageValues[] --- Add ADC voltage values using push()
	
	while(voltageValues[] is not empty)	# only creates thread if atleast one voltage
						# value is present in the array

		CREATE New Thread 
			Determine dot length ---  Call DashDot()
		TERMINATE Thread

		Begin the conversion from voltage to alphanumeric ---  conversion()
	return 1

.................................................................					
function void enableLED ( int gpioPinNumber ) 
	# Simply starts ADC

	Set gpioPinNumber ---  High   # Lights the LED or Begins LED coded message


.................................................................
function void DashDot( ) 
	# Determines the length of a dot and anything larger is seen as a dash
	
	avg ---  determine average of voltageValues[] 
	count = 0
	lowestCount = 0
 	

	# The code below will continue until a dot and dash is found then stop

	FOR x in voltageValues[]
		IF x >= avg     # found black part of message
			count + 1
		ELSE            # found white space pasrt of message
			IF lowestCount = 0
				--- lowestCount = count
			IF count < lowestCount  
				--- lowestCount = count
			END-IF's
			Reset count --- count = 0
		END-IF
	END-FOR
	
	lenDot = lowestCount  # set the dot length to the global dot length variable

.................................................................
function void conversion( ) 	
	# Coverts voltages into alphanumeric symbols and adds to alphanumericValues[] link list.

	avg ---  determine average of voltageValues[] 
	arrayCount = 0   # Used to itterate through array
	count = 0  # Used to count length of high voltages either dash/dot
	int tempArray[7]   	# temp array has a length of 7 as a 'space' has seven dashes which 
				#is the largest possible pattern
	char alphaSymbol

	

	FOR x in voltageValues[]  # Begins from the beginning of array
		IF x < avg  AND length(tempArray) = 0		# This would be white space
			pop( x )	# remove from voltageValues[] array
			free()		# release that bit of memory
			SKIP

		ELSE IF length(tempArray) is 7 		# completed deciphering a word 
							# and found a space that separates words

			alphaSymbol --- compare contents of tempArray[] to morseCodeREF{} 
							#  To find the alphanumeric equivalent 
							#  of the morse Code
			
			push( alphaSymbol ) --- add the character to the 
							2nd list being alphanumericValues[]  
							# add the current word

			push( " ") --- Add a space to alphanumericValues[]  # adding a space separater 
									    # after current word 
			
			empty tempArray[]

			set arrayCount = 0
			

		ELSE IF x < avg  AND length(tempArray) > 0 	# found a white space after finding
								# a black pattern:Then this is the 
								# end of a pattern for a single 
								# character
			IF count>lenDot   # Then found a dash
				tempArray[arrayCount] = 1
				arrayCount + 1
				count = 0
			ELSE  # found a dot
				tempArray[arrayCount] = 0
				arrayCount + 1
				count = 0
			END IF

		ELSE	# this is if there are still black pieces of the pattern being detected
			count + 1
			pop( x )	# remove from voltageValues[] array
			free()		# release that bit of memory
	
			

.................................................................
function void Output( )
	# This outputs the deciphed messaged and frees the memory from the alphanumericValues[]
	string finalMessage = ""
	
	for y in alphanumericValues[]
		finalMessage + y
		pop( y )	# remove from voltageValues[] array
		free()		# release that bit of memory
			
			
	print( finalMessage )	


_________________________________________________________________
			ARRAY FUNCTION
_________________________________________________________________

function void push( pointer*, value ) 
	# add to the top of the list       

.................................................................
function void pop( ponter*, value )
	# removes from the bottom/ removes oldest value

.................................................................
function void free( )      
	# frees the memory after being popped    
     
.................................................................
